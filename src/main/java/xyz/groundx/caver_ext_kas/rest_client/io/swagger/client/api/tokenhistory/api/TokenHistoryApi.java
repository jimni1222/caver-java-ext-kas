/*
 * Token History API
 * # Introduction  Token History API allows users to search for information and transfer records on KLAY, FT (KIP-7, Labeled ERC-20), and NFT (KIP-17, Labeled ERC-721) tokens. You can use Token History API to check the records of a specific EOA transferring KLAY, retrieve NFT information, or other purposes.  For more details on Token History API, refer to our [tutorial](https://klaytn.com).  For any questions regarding this document or KAS, visit [the developer forum](https://forum.klaytn.com/).  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.api;

import com.google.gson.reflect.TypeToken;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.*;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model.PageableTransfers;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model.Transfers;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TokenHistoryApi {
    private ApiClient apiClient;

    public TokenHistoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TokenHistoryApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getTransfers
     * @param xChainId  Klaytn network chain ID (1001 or 8217) (required)
     * @param presets  (csv) Preset IDs to use in search, check Preset IDs in KSA Console (required)
     * @param kind (csv) Indicate the [“klay”, “ft”, or “nft”] type. All types will be searched if no type is specified. (optional)
     * @param range Search range (block number of Unix time) (optional)
     * @param size Maximum number of items to retrieve (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Response offset (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransfersCall(String xChainId, String presets, String kind, String range, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/transfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (kind != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("kind", kind));
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("range", range));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (presets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("presets", presets));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransfersValidateBeforeCall(String xChainId, String presets, String kind, String range, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getTransfers(Async)");
        }
        // verify the required parameter 'presets' is set
        if (presets == null) {
            throw new ApiException("Missing the required parameter 'presets' when calling getTransfers(Async)");
        }
        
        com.squareup.okhttp.Call call = getTransfersCall(xChainId, presets, kind, range, size, cursor, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search for Token Transfer History
     * Search for integrated transfer details. The transfer details include KLAY (&#x60;KlayTransfer&#x60;), FT (&#x60;FtTransfer&#x60;), and NFT (&#x60;NftTransfer&#x60;) transfers.<p></p>  ## KlayTransfer in the FT/NFT Transaction Details Search Result<p></p>  For FT and NFT transfers, the &#x60;KlayTransfer&#x60; transfer detail for executing the token transfer is included. This is because the FT/NFT token transfer is basically an execution of the FT/NFT contract function, and the API includes the triggering KlayTransfer in response which executed the token transfer. Because transactions that execute contract functions do not generally transfer KLAY, the &#x60;value&#x60; of the &#x60;KlayTransfer&#x60; for executing the FT and NFT transfers can be 0.<p></p>  ## Transaction Type<p></p>  * Set the &#x60;kind&#x60; parameter to search for transaction details regarding KLAY, FT, or NFT.<br> * Transaction details for all types will be included in the search response if the &#x60;kind&#x60; parameter is not set.<p></p><br>  ## Search period<p></p>  * For &#x60;range&#x60;, enter the query in the &#x60;range&#x3D;{from},{to}&#x60; format.<br> * &#x60;{from}&#x60; and &#x60;{to}&#x60; will be regarded as Unix time if they are integers and block numbers if they are in hexadecimal format.<br> * If the &#x60;{to}&#x60; value is empty, the current time or recent block number will be used.<br> * Transaction details can be retrieved for up to six (6) months at once (for both Unix time and block numbers).<p></p><br>  ## Preset<p></p>  A Preset contains EOA, FT, and NFT contract addresses, allowing users to easily and quickly retrieve transfer histories of a frequently requested set of accounts.<p></p>  * The &#x60;presets&#x60; query parameter is a required parameter.<br> * [Preset](https://console.klaytnapi.com/service/th/preset/list) must be pre-generated in the KAS Console.<br> * The preset ID can be checked in the KAS Console.<p></p><br>  ## Size<p></p>  * The &#x60;size&#x60; query parameter is optional (minimum &#x3D; 1, maximum &#x3D; 1000, default &#x3D; 100).<br> * Submitting negative values result in errors.<br> * Submitting zero results in a query with &#x60;size&#x3D;100&#x60;, which is the default value.<br> * Submitting values greater than 1000 result in queries with &#x60;size&#x3D;1000&#x60;, which is the maximum value.<br> 
     * @param xChainId  Klaytn network chain ID (1001 or 8217) (required)
     * @param presets  (csv) Preset IDs to use in search, check Preset IDs in KSA Console (required)
     * @param kind (csv) Indicate the [“klay”, “ft”, or “nft”] type. All types will be searched if no type is specified. (optional)
     * @param range Search range (block number of Unix time) (optional)
     * @param size Maximum number of items to retrieve (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Response offset (optional)
     * @return PageableTransfers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageableTransfers getTransfers(String xChainId, String presets, String kind, String range, Long size, String cursor) throws ApiException {
        ApiResponse<PageableTransfers> resp = getTransfersWithHttpInfo(xChainId, presets, kind, range, size, cursor);
        return resp.getData();
    }

    /**
     * Search for Token Transfer History
     * Search for integrated transfer details. The transfer details include KLAY (&#x60;KlayTransfer&#x60;), FT (&#x60;FtTransfer&#x60;), and NFT (&#x60;NftTransfer&#x60;) transfers.<p></p>  ## KlayTransfer in the FT/NFT Transaction Details Search Result<p></p>  For FT and NFT transfers, the &#x60;KlayTransfer&#x60; transfer detail for executing the token transfer is included. This is because the FT/NFT token transfer is basically an execution of the FT/NFT contract function, and the API includes the triggering KlayTransfer in response which executed the token transfer. Because transactions that execute contract functions do not generally transfer KLAY, the &#x60;value&#x60; of the &#x60;KlayTransfer&#x60; for executing the FT and NFT transfers can be 0.<p></p>  ## Transaction Type<p></p>  * Set the &#x60;kind&#x60; parameter to search for transaction details regarding KLAY, FT, or NFT.<br> * Transaction details for all types will be included in the search response if the &#x60;kind&#x60; parameter is not set.<p></p><br>  ## Search period<p></p>  * For &#x60;range&#x60;, enter the query in the &#x60;range&#x3D;{from},{to}&#x60; format.<br> * &#x60;{from}&#x60; and &#x60;{to}&#x60; will be regarded as Unix time if they are integers and block numbers if they are in hexadecimal format.<br> * If the &#x60;{to}&#x60; value is empty, the current time or recent block number will be used.<br> * Transaction details can be retrieved for up to six (6) months at once (for both Unix time and block numbers).<p></p><br>  ## Preset<p></p>  A Preset contains EOA, FT, and NFT contract addresses, allowing users to easily and quickly retrieve transfer histories of a frequently requested set of accounts.<p></p>  * The &#x60;presets&#x60; query parameter is a required parameter.<br> * [Preset](https://console.klaytnapi.com/service/th/preset/list) must be pre-generated in the KAS Console.<br> * The preset ID can be checked in the KAS Console.<p></p><br>  ## Size<p></p>  * The &#x60;size&#x60; query parameter is optional (minimum &#x3D; 1, maximum &#x3D; 1000, default &#x3D; 100).<br> * Submitting negative values result in errors.<br> * Submitting zero results in a query with &#x60;size&#x3D;100&#x60;, which is the default value.<br> * Submitting values greater than 1000 result in queries with &#x60;size&#x3D;1000&#x60;, which is the maximum value.<br> 
     * @param xChainId  Klaytn network chain ID (1001 or 8217) (required)
     * @param presets  (csv) Preset IDs to use in search, check Preset IDs in KSA Console (required)
     * @param kind (csv) Indicate the [“klay”, “ft”, or “nft”] type. All types will be searched if no type is specified. (optional)
     * @param range Search range (block number of Unix time) (optional)
     * @param size Maximum number of items to retrieve (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Response offset (optional)
     * @return ApiResponse&lt;PageableTransfers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageableTransfers> getTransfersWithHttpInfo(String xChainId, String presets, String kind, String range, Long size, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = getTransfersValidateBeforeCall(xChainId, presets, kind, range, size, cursor, null, null);
        Type localVarReturnType = new TypeToken<PageableTransfers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search for Token Transfer History (asynchronously)
     * Search for integrated transfer details. The transfer details include KLAY (&#x60;KlayTransfer&#x60;), FT (&#x60;FtTransfer&#x60;), and NFT (&#x60;NftTransfer&#x60;) transfers.<p></p>  ## KlayTransfer in the FT/NFT Transaction Details Search Result<p></p>  For FT and NFT transfers, the &#x60;KlayTransfer&#x60; transfer detail for executing the token transfer is included. This is because the FT/NFT token transfer is basically an execution of the FT/NFT contract function, and the API includes the triggering KlayTransfer in response which executed the token transfer. Because transactions that execute contract functions do not generally transfer KLAY, the &#x60;value&#x60; of the &#x60;KlayTransfer&#x60; for executing the FT and NFT transfers can be 0.<p></p>  ## Transaction Type<p></p>  * Set the &#x60;kind&#x60; parameter to search for transaction details regarding KLAY, FT, or NFT.<br> * Transaction details for all types will be included in the search response if the &#x60;kind&#x60; parameter is not set.<p></p><br>  ## Search period<p></p>  * For &#x60;range&#x60;, enter the query in the &#x60;range&#x3D;{from},{to}&#x60; format.<br> * &#x60;{from}&#x60; and &#x60;{to}&#x60; will be regarded as Unix time if they are integers and block numbers if they are in hexadecimal format.<br> * If the &#x60;{to}&#x60; value is empty, the current time or recent block number will be used.<br> * Transaction details can be retrieved for up to six (6) months at once (for both Unix time and block numbers).<p></p><br>  ## Preset<p></p>  A Preset contains EOA, FT, and NFT contract addresses, allowing users to easily and quickly retrieve transfer histories of a frequently requested set of accounts.<p></p>  * The &#x60;presets&#x60; query parameter is a required parameter.<br> * [Preset](https://console.klaytnapi.com/service/th/preset/list) must be pre-generated in the KAS Console.<br> * The preset ID can be checked in the KAS Console.<p></p><br>  ## Size<p></p>  * The &#x60;size&#x60; query parameter is optional (minimum &#x3D; 1, maximum &#x3D; 1000, default &#x3D; 100).<br> * Submitting negative values result in errors.<br> * Submitting zero results in a query with &#x60;size&#x3D;100&#x60;, which is the default value.<br> * Submitting values greater than 1000 result in queries with &#x60;size&#x3D;1000&#x60;, which is the maximum value.<br> 
     * @param xChainId  Klaytn network chain ID (1001 or 8217) (required)
     * @param presets  (csv) Preset IDs to use in search, check Preset IDs in KSA Console (required)
     * @param kind (csv) Indicate the [“klay”, “ft”, or “nft”] type. All types will be searched if no type is specified. (optional)
     * @param range Search range (block number of Unix time) (optional)
     * @param size Maximum number of items to retrieve (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Response offset (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransfersAsync(String xChainId, String presets, String kind, String range, Long size, String cursor, final ApiCallback<PageableTransfers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransfersValidateBeforeCall(xChainId, presets, kind, range, size, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageableTransfers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransfersByEoa
     * @param xChainId  Klaytn chain network ID (1001 or 8217) (required)
     * @param address EOA to search, the response only contains transfer details where each transfer detail&#x27;s &#x60;from&#x60; or &#x60;to&#x60; is equal to &#x60;address&#x60; (required)
     * @param kind (csv) Indicate the [“klay”, “ft”, or “nft”] type. All types will be searched if no type is specified. (optional)
     * @param caFilter FT/NFT contract address to filter from the result. If set, the response only contains FT/NFT transfer details with the matching address specified in &#x60;ca-filter&#x60;.  (optional)
     * @param range Search range (block number of Unix time) (optional)
     * @param size Maximum number of items to retrieve (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Response offset (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransfersByEoaCall(String xChainId, String address, String kind, String caFilter, String range, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/transfer/account/{address}"
            .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (kind != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("kind", kind));
        if (caFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ca-filter", caFilter));
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("range", range));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransfersByEoaValidateBeforeCall(String xChainId, String address, String kind, String caFilter, String range, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getTransfersByEoa(Async)");
        }
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getTransfersByEoa(Async)");
        }
        
        com.squareup.okhttp.Call call = getTransfersByEoaCall(xChainId, address, kind, caFilter, range, size, cursor, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search for Token Transfer History with EOA
     * Search for token transfer details of a specific EOA. This is functionally similar to &#x60;GET /v2/transfer&#x60;. However, if this EOA receives or transfers the token in the returned transfer object, &#x60;to&#x60; or &#x60;from&#x60; is the same with the EOA, respectively.<p></p>  Transfer details include KLAY (&#x60;KlayTransfer&#x60;), FT (&#x60;FtTransfer&#x60;), and NFT (&#x60;NftTransfer&#x60;) transfers. For the FT and NFT transfers, the KlayTransfer transfer details for executing the token transfer are included. The &#x60;value&#x60; of the &#x60;KlayTransfer&#x60; for executing the FT and NFT transfers can be 0. For more details, refer to &#x60;GET /v2/transfer&#x60;.<p></p>  ## Transaction Type<p></p>  * Set the &#x60;kind&#x60; parameter to search for transaction details regarding KLAY, FT, or NFT.<br> * Transaction details for all types will be included in the search response if the &#x60;kind&#x60; parameter is not set.<p></p><br>  ## Search period<p></p>  * For &#x60;range&#x60;, enter the query in the &#x60;range&#x3D;{from},{to}&#x60; format.<br> * &#x60;{from}&#x60; and &#x60;{to}&#x60; will be regarded as Unix time if they are integers and block numbers if they are in hexadecimal format.<br> * If the &#x60;{to}&#x60; value is empty, the current time or recent block number will be used.<br> * Transaction details can be retrieved for up to six (6) months at once (for both Unix time and block numbers).<p></p><br>  ## Size<p></p>  * The &#x60;size&#x60; query parameter is optional (minimum &#x3D; 1, maximum &#x3D; 1000, default &#x3D; 100).<br> * Submitting negative values result in errors.<br> * Submitting zero results in a query with &#x60;size&#x3D;100&#x60;, which is the default value.<br> * Submitting values greater than 1000 result in queries with &#x60;size&#x3D;1000&#x60;, which is the maximum value.<br> 
     * @param xChainId  Klaytn chain network ID (1001 or 8217) (required)
     * @param address EOA to search, the response only contains transfer details where each transfer detail&#x27;s &#x60;from&#x60; or &#x60;to&#x60; is equal to &#x60;address&#x60; (required)
     * @param kind (csv) Indicate the [“klay”, “ft”, or “nft”] type. All types will be searched if no type is specified. (optional)
     * @param caFilter FT/NFT contract address to filter from the result. If set, the response only contains FT/NFT transfer details with the matching address specified in &#x60;ca-filter&#x60;.  (optional)
     * @param range Search range (block number of Unix time) (optional)
     * @param size Maximum number of items to retrieve (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Response offset (optional)
     * @return PageableTransfers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageableTransfers getTransfersByEoa(String xChainId, String address, String kind, String caFilter, String range, Long size, String cursor) throws ApiException {
        ApiResponse<PageableTransfers> resp = getTransfersByEoaWithHttpInfo(xChainId, address, kind, caFilter, range, size, cursor);
        return resp.getData();
    }

    /**
     * Search for Token Transfer History with EOA
     * Search for token transfer details of a specific EOA. This is functionally similar to &#x60;GET /v2/transfer&#x60;. However, if this EOA receives or transfers the token in the returned transfer object, &#x60;to&#x60; or &#x60;from&#x60; is the same with the EOA, respectively.<p></p>  Transfer details include KLAY (&#x60;KlayTransfer&#x60;), FT (&#x60;FtTransfer&#x60;), and NFT (&#x60;NftTransfer&#x60;) transfers. For the FT and NFT transfers, the KlayTransfer transfer details for executing the token transfer are included. The &#x60;value&#x60; of the &#x60;KlayTransfer&#x60; for executing the FT and NFT transfers can be 0. For more details, refer to &#x60;GET /v2/transfer&#x60;.<p></p>  ## Transaction Type<p></p>  * Set the &#x60;kind&#x60; parameter to search for transaction details regarding KLAY, FT, or NFT.<br> * Transaction details for all types will be included in the search response if the &#x60;kind&#x60; parameter is not set.<p></p><br>  ## Search period<p></p>  * For &#x60;range&#x60;, enter the query in the &#x60;range&#x3D;{from},{to}&#x60; format.<br> * &#x60;{from}&#x60; and &#x60;{to}&#x60; will be regarded as Unix time if they are integers and block numbers if they are in hexadecimal format.<br> * If the &#x60;{to}&#x60; value is empty, the current time or recent block number will be used.<br> * Transaction details can be retrieved for up to six (6) months at once (for both Unix time and block numbers).<p></p><br>  ## Size<p></p>  * The &#x60;size&#x60; query parameter is optional (minimum &#x3D; 1, maximum &#x3D; 1000, default &#x3D; 100).<br> * Submitting negative values result in errors.<br> * Submitting zero results in a query with &#x60;size&#x3D;100&#x60;, which is the default value.<br> * Submitting values greater than 1000 result in queries with &#x60;size&#x3D;1000&#x60;, which is the maximum value.<br> 
     * @param xChainId  Klaytn chain network ID (1001 or 8217) (required)
     * @param address EOA to search, the response only contains transfer details where each transfer detail&#x27;s &#x60;from&#x60; or &#x60;to&#x60; is equal to &#x60;address&#x60; (required)
     * @param kind (csv) Indicate the [“klay”, “ft”, or “nft”] type. All types will be searched if no type is specified. (optional)
     * @param caFilter FT/NFT contract address to filter from the result. If set, the response only contains FT/NFT transfer details with the matching address specified in &#x60;ca-filter&#x60;.  (optional)
     * @param range Search range (block number of Unix time) (optional)
     * @param size Maximum number of items to retrieve (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Response offset (optional)
     * @return ApiResponse&lt;PageableTransfers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageableTransfers> getTransfersByEoaWithHttpInfo(String xChainId, String address, String kind, String caFilter, String range, Long size, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = getTransfersByEoaValidateBeforeCall(xChainId, address, kind, caFilter, range, size, cursor, null, null);
        Type localVarReturnType = new TypeToken<PageableTransfers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search for Token Transfer History with EOA (asynchronously)
     * Search for token transfer details of a specific EOA. This is functionally similar to &#x60;GET /v2/transfer&#x60;. However, if this EOA receives or transfers the token in the returned transfer object, &#x60;to&#x60; or &#x60;from&#x60; is the same with the EOA, respectively.<p></p>  Transfer details include KLAY (&#x60;KlayTransfer&#x60;), FT (&#x60;FtTransfer&#x60;), and NFT (&#x60;NftTransfer&#x60;) transfers. For the FT and NFT transfers, the KlayTransfer transfer details for executing the token transfer are included. The &#x60;value&#x60; of the &#x60;KlayTransfer&#x60; for executing the FT and NFT transfers can be 0. For more details, refer to &#x60;GET /v2/transfer&#x60;.<p></p>  ## Transaction Type<p></p>  * Set the &#x60;kind&#x60; parameter to search for transaction details regarding KLAY, FT, or NFT.<br> * Transaction details for all types will be included in the search response if the &#x60;kind&#x60; parameter is not set.<p></p><br>  ## Search period<p></p>  * For &#x60;range&#x60;, enter the query in the &#x60;range&#x3D;{from},{to}&#x60; format.<br> * &#x60;{from}&#x60; and &#x60;{to}&#x60; will be regarded as Unix time if they are integers and block numbers if they are in hexadecimal format.<br> * If the &#x60;{to}&#x60; value is empty, the current time or recent block number will be used.<br> * Transaction details can be retrieved for up to six (6) months at once (for both Unix time and block numbers).<p></p><br>  ## Size<p></p>  * The &#x60;size&#x60; query parameter is optional (minimum &#x3D; 1, maximum &#x3D; 1000, default &#x3D; 100).<br> * Submitting negative values result in errors.<br> * Submitting zero results in a query with &#x60;size&#x3D;100&#x60;, which is the default value.<br> * Submitting values greater than 1000 result in queries with &#x60;size&#x3D;1000&#x60;, which is the maximum value.<br> 
     * @param xChainId  Klaytn chain network ID (1001 or 8217) (required)
     * @param address EOA to search, the response only contains transfer details where each transfer detail&#x27;s &#x60;from&#x60; or &#x60;to&#x60; is equal to &#x60;address&#x60; (required)
     * @param kind (csv) Indicate the [“klay”, “ft”, or “nft”] type. All types will be searched if no type is specified. (optional)
     * @param caFilter FT/NFT contract address to filter from the result. If set, the response only contains FT/NFT transfer details with the matching address specified in &#x60;ca-filter&#x60;.  (optional)
     * @param range Search range (block number of Unix time) (optional)
     * @param size Maximum number of items to retrieve (min&#x3D;1, max&#x3D;1000, default&#x3D;100) (optional)
     * @param cursor Response offset (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransfersByEoaAsync(String xChainId, String address, String kind, String caFilter, String range, Long size, String cursor, final ApiCallback<PageableTransfers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransfersByEoaValidateBeforeCall(xChainId, address, kind, caFilter, range, size, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageableTransfers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransfersByTxHash
     * @param xChainId  Klaytn network chain ID (1001 or 8217) (required)
     * @param transactionHash Transaction hash to search (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransfersByTxHashCall(String xChainId, String transactionHash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/transfer/tx/{transaction-hash}"
            .replaceAll("\\{" + "transaction-hash" + "\\}", apiClient.escapeString(transactionHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransfersByTxHashValidateBeforeCall(String xChainId, String transactionHash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getTransfersByTxHash(Async)");
        }
        // verify the required parameter 'transactionHash' is set
        if (transactionHash == null) {
            throw new ApiException("Missing the required parameter 'transactionHash' when calling getTransfersByTxHash(Async)");
        }
        
        com.squareup.okhttp.Call call = getTransfersByTxHashCall(xChainId, transactionHash, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search for Token Transfer History with a Transaction Hash
     * Search for transfer details with a transaction hash. Transfer details include KLAY (&#x60;KlayTransfer&#x60;), FT (&#x60;FtTransfer&#x60;), and NFT (&#x60;NftTransfer&#x60;) transfers. For the FT and NFT transfers, the KlayTransfer transfer details for executing the token transfer are included. The &#x60;value&#x60; of the &#x60;KlayTransfer&#x60; for executing the FT and NFT transfers can be 0. For more details, refer to &#x60;GET /v2/transfer&#x60;.
     * @param xChainId  Klaytn network chain ID (1001 or 8217) (required)
     * @param transactionHash Transaction hash to search (required)
     * @return Transfers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Transfers getTransfersByTxHash(String xChainId, String transactionHash) throws ApiException {
        ApiResponse<Transfers> resp = getTransfersByTxHashWithHttpInfo(xChainId, transactionHash);
        return resp.getData();
    }

    /**
     * Search for Token Transfer History with a Transaction Hash
     * Search for transfer details with a transaction hash. Transfer details include KLAY (&#x60;KlayTransfer&#x60;), FT (&#x60;FtTransfer&#x60;), and NFT (&#x60;NftTransfer&#x60;) transfers. For the FT and NFT transfers, the KlayTransfer transfer details for executing the token transfer are included. The &#x60;value&#x60; of the &#x60;KlayTransfer&#x60; for executing the FT and NFT transfers can be 0. For more details, refer to &#x60;GET /v2/transfer&#x60;.
     * @param xChainId  Klaytn network chain ID (1001 or 8217) (required)
     * @param transactionHash Transaction hash to search (required)
     * @return ApiResponse&lt;Transfers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Transfers> getTransfersByTxHashWithHttpInfo(String xChainId, String transactionHash) throws ApiException {
        com.squareup.okhttp.Call call = getTransfersByTxHashValidateBeforeCall(xChainId, transactionHash, null, null);
        Type localVarReturnType = new TypeToken<Transfers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search for Token Transfer History with a Transaction Hash (asynchronously)
     * Search for transfer details with a transaction hash. Transfer details include KLAY (&#x60;KlayTransfer&#x60;), FT (&#x60;FtTransfer&#x60;), and NFT (&#x60;NftTransfer&#x60;) transfers. For the FT and NFT transfers, the KlayTransfer transfer details for executing the token transfer are included. The &#x60;value&#x60; of the &#x60;KlayTransfer&#x60; for executing the FT and NFT transfers can be 0. For more details, refer to &#x60;GET /v2/transfer&#x60;.
     * @param xChainId  Klaytn network chain ID (1001 or 8217) (required)
     * @param transactionHash Transaction hash to search (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransfersByTxHashAsync(String xChainId, String transactionHash, final ApiCallback<Transfers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransfersByTxHashValidateBeforeCall(xChainId, transactionHash, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Transfers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
