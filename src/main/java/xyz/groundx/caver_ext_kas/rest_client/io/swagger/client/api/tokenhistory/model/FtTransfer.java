/*
 * Token History API
 * # Introduction  Token History API allows users to search for information and transfer records on KLAY, FT (KIP-7, Labeled ERC-20), and NFT (KIP-17, Labeled ERC-721) tokens. You can use Token History API to check the records of a specific EOA transferring KLAY, retrieve NFT information, or other purposes.  For more details on Token History API, refer to our [tutorial](https://klaytn.com).  For any questions regarding this document or KAS, visit [the developer forum](https://forum.klaytn.com/).  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model.FtContract;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.tokenhistory.model.Transaction;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * FtTransfer
 */


public class FtTransfer implements AnyOfTransferArrayItems {
  @SerializedName("contract")
  private FtContract contract = null;

  @SerializedName("formattedValue")
  private String formattedValue = null;

  @SerializedName("from")
  private String from = null;

  @SerializedName("to")
  private String to = null;

  @SerializedName("transaction")
  private Transaction transaction = null;

  @SerializedName("transferType")
  private String transferType = null;

  @SerializedName("value")
  private String value = null;

  public FtTransfer contract(FtContract contract) {
    this.contract = contract;
    return this;
  }

   /**
   * Get contract
   * @return contract
  **/
  @Schema(required = true, description = "")
  public FtContract getContract() {
    return contract;
  }

  public void setContract(FtContract contract) {
    this.contract = contract;
  }

  public FtTransfer formattedValue(String formattedValue) {
    this.formattedValue = formattedValue;
    return this;
  }

   /**
   * Converted value with the contract specific decimal
   * @return formattedValue
  **/
  @Schema(example = "0.000000000000000002", required = true, description = "Converted value with the contract specific decimal")
  public String getFormattedValue() {
    return formattedValue;
  }

  public void setFormattedValue(String formattedValue) {
    this.formattedValue = formattedValue;
  }

  public FtTransfer from(String from) {
    this.from = from;
    return this;
  }

   /**
   * Sender EOA (20-byte)
   * @return from
  **/
  @Schema(example = "0x5e47b195eeb11d72f5e1d27aebb6d341f1a9bedb", required = true, description = "Sender EOA (20-byte)")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public FtTransfer to(String to) {
    this.to = to;
    return this;
  }

   /**
   * Receiver EOA (20-byte)
   * @return to
  **/
  @Schema(example = "0xb4bf60383c64d47f2e667f2fe8f7ed0c9380f770", required = true, description = "Receiver EOA (20-byte)")
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }

  public FtTransfer transaction(Transaction transaction) {
    this.transaction = transaction;
    return this;
  }

   /**
   * Get transaction
   * @return transaction
  **/
  @Schema(required = true, description = "")
  public Transaction getTransaction() {
    return transaction;
  }

  public void setTransaction(Transaction transaction) {
    this.transaction = transaction;
  }

  public FtTransfer transferType(String transferType) {
    this.transferType = transferType;
    return this;
  }

   /**
   * Type of transaction detail
   * @return transferType
  **/
  @Schema(example = "ft", required = true, description = "Type of transaction detail")
  public String getTransferType() {
    return transferType;
  }

  public void setTransferType(String transferType) {
    this.transferType = transferType;
  }

  public FtTransfer value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Number of tokens transferred (in hexadecimal)
   * @return value
  **/
  @Schema(example = "0xa", required = true, description = "Number of tokens transferred (in hexadecimal)")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FtTransfer ftTransfer = (FtTransfer) o;
    return Objects.equals(this.contract, ftTransfer.contract) &&
        Objects.equals(this.formattedValue, ftTransfer.formattedValue) &&
        Objects.equals(this.from, ftTransfer.from) &&
        Objects.equals(this.to, ftTransfer.to) &&
        Objects.equals(this.transaction, ftTransfer.transaction) &&
        Objects.equals(this.transferType, ftTransfer.transferType) &&
        Objects.equals(this.value, ftTransfer.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contract, formattedValue, from, to, transaction, transferType, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FtTransfer {\n");
    
    sb.append("    contract: ").append(toIndentedString(contract)).append("\n");
    sb.append("    formattedValue: ").append(toIndentedString(formattedValue)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("    transferType: ").append(toIndentedString(transferType)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
